<?php
/**
 * Copyright Â© 2017 SkyBox Checkout Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

namespace Skybox\Checkout\Model\Order;

use \Magento\Sales\Model\Order;

/**
 * Create Order
 * @package Skybox\Checkout\Model\Order
 */
class Create
{
    const SHIPPING_METHOD_NAME = 'skybox_checkout_shipping';
    const PAYMENT_METHOD_NAME = 'skybox_checkout_payment';

    const SHIPPING_METHOD_NAME_DEFAULT = 'flatrate_flatrate';
    const PAYMENT_METHOD_NAME_DEFAULT = 'checkmo';

    const STATUS_HISTORY_COMMENT = 'This order was generated by Skybox Checkout';

    public function __construct(
        \Magento\Framework\App\Helper\Context $context,
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Magento\Catalog\Model\Product $product,
        \Magento\Catalog\Model\ProductFactory $productFactory,
        \Magento\Quote\Model\QuoteFactory $quote,
        \Magento\Quote\Model\QuoteManagement $quoteManagement,
        \Magento\Customer\Model\CustomerFactory $customerFactory,
        \Magento\Customer\Api\CustomerRepositoryInterface $customerRepository,
        \Magento\Sales\Model\Service\OrderService $orderService,
        \Magento\Quote\Api\CartRepositoryInterface $cartRepositoryInterface,
        \Magento\Quote\Api\CartManagementInterface $cartManagementInterface,
        \Magento\Quote\Model\Quote\Address\Rate $shippingRate
    ) {
        $this->_storeManager           = $storeManager;
        $this->_product                = $product;
        $this->_productFactory         = $productFactory;
        $this->quote                   = $quote;
        $this->quoteManagement         = $quoteManagement;
        $this->customerFactory         = $customerFactory;
        $this->customerRepository      = $customerRepository;
        $this->orderService            = $orderService;
        $this->cartRepositoryInterface = $cartRepositoryInterface;
        $this->cartManagementInterface = $cartManagementInterface;
        $this->shippingRate            = $shippingRate;
        $this->logger                  = $context->getLogger();
        $this->_request                = $context->getRequest();
    }

    /**
     * Create Order On Your Store
     *
     * @param int $storeId
     * @param array $orderData
     *
     * @return array
     *
     */
    public function createOrder($storeId, $orderData)
    {
        // init the quote
        $quote = $this->quote->create();
        $quote->setStoreId($storeId);

        // Guest Customer
        $quote->setIsMultiShipping(false);
        $quote->setCustomerId(null)
              ->setCustomerEmail($orderData['email'])
              ->setCustomerIsGuest(true)
              ->setCustomerGroupId(\Magento\Customer\Api\Data\GroupInterface::NOT_LOGGED_IN_ID);

        $quote->setCurrency();

        $this->cartRepositoryInterface->save($quote);

        // add items in Quote
        $products    = $orderData['products'];
        $productList = [];

        if (empty($products)) {
            $this->logger->debug('[SBC] Create::createOrder: Order Error. Not products given.');
        } else {
            foreach ($products as $item) {
                $productId = $item->getProductId();

                $quote = $this->addQuoteItem($quote, $productId, $item->getQuantity());

                $productList[$productId] = $item;
            }
        }

        // SkyBox Products
        foreach ($quote->getAllItems() as $quoteItem) {
            $product = $productList[$quoteItem->getProductId()];
            $quoteItem->setCustomPrice($product->getProductPriceUSD());
            $quoteItem->setOriginalCustomPrice($product->getProductPriceUSD());
            $quoteItem->setRowTotal($product->getProductPriceUSD());
            $quoteItem->setBaseRowTotal($product->getProductPriceUSD());
        }

        // Set Address to quote
        $quote->getBillingAddress()->addData($orderData['shipping_address']);
        $quote->getShippingAddress()->addData($orderData['shipping_address']);

        // Collect Rates and Set Shipping & Payment Method
        $shippingAddress = $quote->getShippingAddress();

        $this->shippingRate
            ->setCode(self::SHIPPING_METHOD_NAME)
            ->getPrice(1);

        $quote->getShippingAddress()->setShippingMethod(self::SHIPPING_METHOD_NAME)
              ->setShippingDescription('Skybox Shipping');
        $quote->getShippingAddress()->addShippingRate($this->shippingRate);

        // Payment method
        $quote->setPaymentMethod(self::PAYMENT_METHOD_NAME);
        $quote->setShippingAddress($shippingAddress);

        $quote->setInventoryProcessed(false);

        // Set Sales Order Payment
        $quote->getPayment()->importData(['method' => self::PAYMENT_METHOD_NAME]);

        // Total Shopping Checkout
        $objData        = $orderData['total_shopping_cart'];
        $skyboxConcepts = [];

        $subtotal  = 0;
        $skyboxFee = $objData->getTotalFeeUSD();

        if (!$skyboxFee) {
            $skyboxFee = $this->getCustomTotalFeeUSD($objData);
        }

        // Subtotal
        $products = $orderData['products'];
        foreach ($products as $product) {
            $subtotal += $product->getProductPriceUSD();
        }

        $skyboxConcepts = json_encode($skyboxConcepts);
        $skyboxFee      = round($skyboxFee, 2);

        $grandTotal = $objData->getTotalPriceUSD();

        $shippingAddress->setSubtotal($subtotal);
        $shippingAddress->setBaseSubtotal($subtotal);

        $quote->setSkyboxFee($skyboxFee);

        $shippingAddress->setGrandTotal($grandTotal);
        $shippingAddress->setBaseGrandTotal($grandTotal);

        $this->logger->debug("[SBC] Create::creatOrder: SubTotal:{$subtotal}; SkyboxFee:{$skyboxFee}; GrandTotal:{$grandTotal};");

        // SkyBox Custom Attributes
        $shippingAddress->setData('skybox_subtotal', $subtotal);
        $shippingAddress->setData('skybox_base_subtotal', $subtotal);
        $shippingAddress->setData('skybox_grand_total', $grandTotal);

        $shippingAddress->setData('skybox_concepts', $skyboxConcepts);

        $this->cartRepositoryInterface->save($quote);

        // Collect total and save
        $quote->collectTotals();
        $quote->save();

        /** @var \Magento\Sales\Model\Order $order */
        $order = $this->cartManagementInterface->submit($quote);

        // do not send the email
        $order->setSendEmail(false);
        $order->setEmailSent(null);

        // State & Status
        $order->setState(Order::STATE_COMPLETE);
        $order->setStatus(Order::STATE_COMPLETE);

        // add comment
        $history = $order->addStatusHistoryComment(self::STATUS_HISTORY_COMMENT, false);
        $history->setIsCustomerNotified(false);

        // give a result back
        if ($order->getEntityId()) {
            $result['order_id'] = $order->getRealOrderId();
        } else {
            $result = ['error' => 1, 'msg' => 'An error'];
        }

        return $result;
    }

    /**
     * Fallback method, in case the parameter TotalFeeUSD never come
     *
     * @param $objData
     *
     * @return int
     */
    private function getCustomTotalFeeUSD($objData)
    {
        $details = $objData->getListDetailConcepts();

        $productConcept = ['product', 'producto'];
        $skyboxFee      = 0;

        foreach ($details as $detail) {
            $skyboxConcepts[] = $detail->toArray();
            if ($detail->getVisible()) {
                $name = strtolower($detail->getConcept());
                if (!in_array($name, $productConcept)) {
                    $value     = $detail->getValueUSD();
                    $skyboxFee += $value;
                }
            }
        }

        return $skyboxFee;
    }

    /**
     * @param $quote
     * @param $productId
     * @param $qty
     *
     * @return mixed
     */
    private function addQuoteItem($quote, $productId, $qty)
    {
        $product = $this->_productFactory->create()->load($productId);
        $quote->addProduct($product, $qty);

        return $quote;
    }
}
